package com.multithread3.section7MultithreadConcept;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class DeadlockFix {

    private Lock lock1 = new ReentrantLock(true);
    private Lock lock2 = new ReentrantLock(true);

    public static void main(String[] args) {
        DeadlockFix noDeadlock = new DeadlockFix();

        new Thread(noDeadlock::worker1, "worker1").start();
        new Thread(noDeadlock::worker2, "worker2").start();
    }

    public void worker1() {
        // ‚úÖ GI·∫¢I PH√ÅP: C·∫£ 2 worker ƒë·ªÅu l·∫•y lock theo TH·ª® T·ª∞ GI·ªêNG NHAU
        // Lu√¥n l·∫•y lock1 tr∆∞·ªõc, sau ƒë√≥ m·ªõi l·∫•y lock2

        System.out.println("Worker1 ƒëang ch·ªù lock1...");
        lock1.lock();
        System.out.println("Worker1 ƒë√£ l·∫•y lock1 ‚úÖ");

        try {
            Thread.sleep(300);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Worker1 ƒëang ch·ªù lock2...");
        lock2.lock();
        System.out.println("Worker1 ƒë√£ l·∫•y lock2 ‚úÖ");

        // Th·ª±c hi·ªán c√¥ng vi·ªác
        System.out.println("üî• Worker1 ƒëang l√†m vi·ªác...");

        // Gi·∫£i ph√≥ng lock theo th·ª© t·ª± ng∆∞·ª£c l·∫°i (LIFO)
        lock2.unlock();
        System.out.println("Worker1 ƒë√£ tr·∫£ lock2");

        lock1.unlock();
        System.out.println("Worker1 ƒë√£ tr·∫£ lock1");

        System.out.println("‚úÖ Worker1 ho√†n th√†nh!");
    }

    public void worker2() {
        // ‚úÖ QUAN TR·ªåNG: Worker2 c≈©ng l·∫•y lock theo TH·ª® T·ª∞ GI·ªêNG Worker1
        // lock1 tr∆∞·ªõc -> lock2 sau (kh√¥ng ƒë·∫£o ng∆∞·ª£c!)

        System.out.println("Worker2 ƒëang ch·ªù lock1...");
        lock1.lock();
        System.out.println("Worker2 ƒë√£ l·∫•y lock1 ‚úÖ");

        try {
            Thread.sleep(300);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Worker2 ƒëang ch·ªù lock2...");
        lock2.lock();
        System.out.println("Worker2 ƒë√£ l·∫•y lock2 ‚úÖ");

        // Th·ª±c hi·ªán c√¥ng vi·ªác
        System.out.println("üî• Worker2 ƒëang l√†m vi·ªác...");

        // Gi·∫£i ph√≥ng lock theo th·ª© t·ª± ng∆∞·ª£c l·∫°i (LIFO)
        lock2.unlock();
        System.out.println("Worker2 ƒë√£ tr·∫£ lock2");

        lock1.unlock();
        System.out.println("Worker2 ƒë√£ tr·∫£ lock1");

        System.out.println("‚úÖ Worker2 ho√†n th√†nh!");
    }
}

/*
=== T·∫†I SAO KH√îNG C√íN DEADLOCK? ===

B·∫±ng c√°ch c·∫£ 2 worker ƒë·ªÅu l·∫•y lock theo c√πng th·ª© t·ª±:
1. Worker n√†o ch·∫°y tr∆∞·ªõc s·∫Ω l·∫•y ƒë∆∞·ª£c lock1
2. Worker c√≤n l·∫°i ph·∫£i ch·ªù ƒë·∫øn khi worker ƒë·∫ßu ti√™n tr·∫£ lock1
3. Kh√¥ng c√≥ t√¨nh hu·ªëng "t√¥i gi·ªØ A ƒë·ª£i B, b·∫°n gi·ªØ B ƒë·ª£i A"

Timeline m·ªõi:
- Worker1 l·∫•y lock1 ‚úÖ
- Worker2 ch·ªù lock1 ‚è≥
- Worker1 l·∫•y lock2 ‚úÖ
- Worker1 l√†m vi·ªác xong, tr·∫£ lock2, tr·∫£ lock1
- Worker2 l·∫•y ƒë∆∞·ª£c lock1 ‚úÖ
- Worker2 l·∫•y ƒë∆∞·ª£c lock2 ‚úÖ
- Worker2 l√†m vi·ªác xong, tr·∫£ lock2, tr·∫£ lock1
- HO√ÄN TH√ÄNH! üéâ

=== NGUY√äN T·∫ÆC TR√ÅNH DEADLOCK ===
1. **Th·ª© t·ª± c·ªë ƒë·ªãnh**: Lu√¥n l·∫•y lock theo c√πng m·ªôt th·ª© t·ª±
2. **Timeout**: D√πng tryLock() v·ªõi th·ªùi gian ch·ªù
3. **Tr√°nh nested lock**: H·∫°n ch·∫ø l·∫•y nhi·ªÅu lock c√πng l√∫c
4. **Lock-free**: S·ª≠ d·ª•ng CAS (Compare-And-Swap) thay v√¨ lock
*/

PriorityBlockingQueue

Collections synchronization

linkbl
CountDownLatch

arrayblockingqueue
linkedblockingqueue
LinkedBlockingDeque

        BlockingPriorityQueue

Concurrent maps
exchanger
        CopyOnWriteArrays

t·∫°o cho t√¥i 1 file .md n·ªôi dung  ƒë·∫ßy ƒë·ªß nh·∫•t v·ªÅ CopyOnWriteArrays.
n·ªôi dung gi·∫£i th√≠ch r√µ r√†ng chi ti·∫øt cho ng∆∞·ªùi ch∆∞a bi·∫øt g√¨ c≈©ng hi·ªÉu ƒë∆∞·ª£c.
comment code ti·∫øng vi·ªát t·ª´ng step quan tr·ªçng v√† t·∫°i sao ph·∫£i l√†m nh∆∞ v·∫≠y. so s√°nh k·∫øt qu·∫£ gi·ªØa vi·ªác c√≥ d√πng v√† kh√¥ng d√πng.
k√®m k·∫øt qu·∫£ benchmark n·∫øu c√≥.
v√† best practice nh·ªØng use case c·ª±c k·ª≥ ph√π h·ª£p ƒë·ªÉ d√πng CopyOnWriteArrays m√† kh√¥ng ph·∫£i l√† nh·ªØng c√°i kh√°c.
l∆∞u √Ω . comment code v√† gi·∫£i th√≠ch b·∫±ng ti·∫øng vi·ªát chi ti·∫øt. ko d√πng english.